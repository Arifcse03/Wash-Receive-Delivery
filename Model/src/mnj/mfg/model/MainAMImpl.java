package mnj.mfg.model;

import java.sql.CallableStatement;

import javax.faces.application.FacesMessage;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;

import javax.servlet.http.HttpSession;

import mnj.mfg.model.common.MainAM;
import mnj.mfg.model.lov.CustomerLOVImpl;
import mnj.mfg.model.lov.FillBposVOImpl;
import mnj.mfg.model.lov.operatingUnitsVoImpl;
import mnj.mfg.model.lov.papulateSizeVoImpl;


import mnj.mfg.model.lov.similarPopSizeVOImpl;

import oracle.jbo.Row;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;


import oracle.jbo.server.ViewObjectImpl;

import oracle.jdbc.OracleTypes;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon May 02 18:30:01 PKT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MainAMImpl extends ApplicationModuleImpl implements MainAM {
    /**
     * This is the default constructor (do not remove).
     */
    public MainAMImpl() {
    }

    /**
     * Container's getter for HeaderVO1.
     * @return HeaderVO1
     */
    public ViewObjectImpl getHeaderVO1() {
        return (ViewObjectImpl)findViewObject("HeaderVO1");
    }


    public void FillRollLines() {


        ViewObject populatevo = getpapulateSizeVo1();
        // populatevo.executeQuery();

        Row[] r = populatevo.getAllRowsInRange();
        System.out.println("Drop ------->" + r.length);
        for (Row row : r) {

            if (row.getAttribute("FlagSize") != null &&
                row.getAttribute("FlagSize").equals("Y")) {
                System.out.println("FlagSize --->" +
                                   row.getAttribute("FlagSize"));
                popSizeAll(row);
            }
        }
    }

    public void popSizeAll(Row poprow) {
//// here fill value is taking form fill Size popup And inserting below table

        Row linerow = getRollLine();

        linerow.setAttribute("Attribute1", getPopulateValue(poprow, "Inseem"));
        linerow.setAttribute("SizeInseam",
                             getPopulateValue(poprow, "SizeVal"));
        linerow.setAttribute("Quantity", getPopulateValue(poprow, "TotalQty"));

    } //end of populateLines

    public Row getRollLine() {

        ViewObject vo = getIssueInseemSizeDVO1();
        Row row = vo.createRow();
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED);
        return row;
    } //end of createHeader

    public String getPopulateValue(Row r, String columnName) {

        String value = null;
        try {
            value = r.getAttribute(columnName).toString();
        } catch (Exception e) {
            ;
        }
        return value;
    }

    public void setRollwhereClause() {
        System.out.println("Wher clause cut no -->" + getstyle());

        ViewObject vo = getpapulateSizeVo1();
       // vo.setWhereClause("STYLE = '" + getstyle() + "' AND BPO_NO = '" +getBpo() + "'");
        
        vo.setWhereClause("STYLE = '" + getstyle() + "' AND SEASON = '" + getseason() +
                              "' AND COLOR = '" + getColor() + "' AND BPO = '" +getBpo() + "'");
        
        vo.executeQuery();
    }

    public String getstyle() {

        ViewObject vo = getLineHeaderEOView1();
        String cutNo = null;
        try {
            cutNo = vo.getCurrentRow().getAttribute("Style").toString();
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }

        return cutNo;

    }
    
    public String getseason() {

        ViewObject vo = getLineHeaderEOView1();
        String cutNo = null;
        try {
            cutNo = vo.getCurrentRow().getAttribute("Season").toString();
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }

        return cutNo;

    }


    /**
     * Container's getter for papulateSizeVo1.
     * @return papulateSizeVo1
     */
    public papulateSizeVoImpl getpapulateSizeVo1() {
        return (papulateSizeVoImpl)findViewObject("papulateSizeVo1");
    }

    //////////////////////////SimilarPOPSize////////

    public void FillRollLines1() {
        System.out.println("Enter FillRollLines1 ------->");
        ViewObject populatevo = getsimilarPopSizeVO1();
        // populatevo.executeQuery();

        Row[] r = populatevo.getAllRowsInRange();
        System.out.println("Drop FillRollLines1 ------->" + r.length);
        for (Row row : r) {

            if (row.getAttribute("SFLAG") != null &&
                row.getAttribute("SFLAG").equals("Y")) {
                System.out.println("SFLAG --->" + row.getAttribute("SFLAG"));
                popSizeAll1(row);
            }
        }
    }

    public void setRollwhereClause1() {

        System.out.println("HEADER_ID = " + getHeader_id() + " AND STN = '" +
                           getStn() + "'");
        ViewObject vo = getsimilarPopSizeVO1();
        vo.setWhereClause("HEADER_ID = " + getHeader_id() + " AND STN = '" +
                          getStn() + "'");
        System.out.println("Where clause Style HEADER_ID -->" +
                           getHeader_id());
        vo.executeQuery();
    }

    public String getHeader_id() {

        ViewObject vo = getHeaderVO1();
        String cutNo1 = null;
        try {
            cutNo1 = vo.getCurrentRow().getAttribute("HeaderId").toString();
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }

        return cutNo1;

    }

    public String getStn() {

        ViewObject vo = getReceiveDetailVO1();
        String cutNo1 = null;
        try {
            cutNo1 = vo.getCurrentRow().getAttribute("Attribute2").toString();
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }

        return cutNo1;

    }


    public void popSizeAll1(Row poprow) {

        System.out.println("Drop popSizeAll1 ------->");
        Row linerow1 = getRollLin();
        linerow1.setAttribute("Attribute1",
                              getPopulateValue1(poprow, "Attribute1"));
        linerow1.setAttribute("SizeInseam",
                              getPopulateValue1(poprow, "SizeInseam"));
        linerow1.setAttribute("Quantity",
                              getPopulateValue1(poprow, "Quantity"));

        System.out.println("after Drop popSizeAll1 ------->" + linerow1);
    } //end of populateLines


    public Row getRollLin() {

        ViewObject vo = getReciveSizeInseemVO1();
        Row row = vo.createRow();
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED);
        return row;
    } //end of createHeader

    public String getPopulateValue1(Row r, String columnName) {

        String value = null;
        try {
            value = r.getAttribute(columnName).toString();
        } catch (Exception e) {
            ;
        }
        return value;
    }

    ///////////////////////////////////////////////

    //////////////////////

    public void selectAllLines(String flag) {

        System.out.println("ENTER AM select all line ---->");
        ViewObject populatevo = getpapulateSizeVo1();
        //populatevo.executeQuery();

        Row[] r = populatevo.getAllRowsInRange();

        for (Row row : r) {
            System.out.println("Loop select");
            row.setAttribute("FlagSize", flag);
            System.out.println("Get select ---->" + row.getAttribute("Flag"));

        }
    }
    
    public void selectAllLines0(String flag) {

        System.out.println("ENTER AM select all line 0 ---->");
        ViewObject populatevo = getFillBposVO1();
        //populatevo.executeQuery();

        Row[] r = populatevo.getAllRowsInRange();

        for (Row row : r) {
            System.out.println("Loop select 1");
            row.setAttribute("FlagNew", flag);
            System.out.println("Get select 0---->" +
                               row.getAttribute("FlagNew"));

        }
    }

    public void selectAllLines1(String flag) {

        System.out.println("ENTER AM select all line 1 ---->");
        ViewObject populatevo = getsimilarPopSizeVO1();
        //populatevo.executeQuery();

        Row[] r = populatevo.getAllRowsInRange();

        for (Row row : r) {
            System.out.println("Loop select 1");
            row.setAttribute("SFLAG", flag);
            System.out.println("Get select 1---->" +
                               row.getAttribute("SFLAG"));

        }
    }
    ////////////////////FILL BPO///////////

    public void FillRollLinesBPO() {
        System.out.println("INTER FillRollLinesBPO ------->");

        ViewObject populatevo = getFillBposVO1();
        // populatevo.executeQuery();

        Row[] r = populatevo.getAllRowsInRange();
        System.out.println("Drop BPO ------->" + r.length);
        for (Row row : r) {

            if (row.getAttribute("FlagNew") != null &&
                row.getAttribute("FlagNew").equals("Y")) {
                System.out.println("FlagNew bpo --->" +
                                   row.getAttribute("FlagNew"));
                popBPOAll(row);
              //  getDBTransaction().commit();
            }
        }
        pageLoadEvent();
    }

    public void popBPOAll(Row poprow) {


        Row linerow = getRollBPO();
        linerow.setAttribute("BpoId", getPopulateValue(poprow, "BpoId"));
      //  linerow.setAttribute("Attribute1", getPopulateValue(poprow, "BpoNo"));
       // linerow.setAttribute("Attribute2",
                            // getPopulateValue(poprow, "StnNumber"));
        //linerow.setAttribute("Attribute3", getPopulateValue(poprow, "Color"));
        linerow.setAttribute("ProductionType", "Bulk");
        linerow.setAttribute("IssuanceChallanNo", getIssueChallanNo());

    } //end of populateLines

    public Row getRollBPO() {

        ViewObject vo = getLineVO1();
        Row row = vo.createRow();
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED);
        return row;
    } //end of createHeader

    public void setRollwhereClauseBPO() {
        try {
            System.out.println("Wher clause style no -->" + getstyle());
            System.out.println("Wher clause season no -->" + getseason());

            ViewObject vo = getFillBposVO1();
            vo.setWhereClause("STYLE = '" + getstyle() + "'" + "AND SEASON = '" + getseason() + "'");
            vo.executeQuery();
            System.out.println(vo.getQuery());
        } catch (Exception e) {
            
            e.printStackTrace();
        }
        
    }


    /**
     * Container's getter for FillBposVO1.
     * @return FillBposVO1
     */
    public FillBposVOImpl getFillBposVO1() {
        return (FillBposVOImpl)findViewObject("FillBposVO1");
    }

    /**
     * Container's getter for CustomerLOV1.
     * @return CustomerLOV1
     */
    public CustomerLOVImpl getCustomerLOV1() {
        return (CustomerLOVImpl)findViewObject("CustomerLOV1");
    }

    public String getBpo() {
        String Result = null;
        ViewObject vo = getLineVO1();
        
        //here arif vai is changing Attribute1 to Bpo 
        Result = vo.getCurrentRow().getAttribute("Bpo").toString();
        return Result;
    }

    public String getStnNumber() {
        String Result = null;
        ViewObject vo = getLineVO1();
        Result = vo.getCurrentRow().getAttribute("Attribute2").toString();
        return Result;
    }

    public String getColor() {
        String Result = null;
        ViewObject vo = getLineVO1();
        //arif changed Attribute3 to Color
        Result = vo.getCurrentRow().getAttribute("Color").toString();
        return Result;
    }

    public String getIssueChallanNo() {


        String result = "0";
        String stmt = "BEGIN :1 := MNJ_MFG_ISSUANCE_CHALLAN_NO(); end;";

        CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        try {
            cs.registerOutParameter(1, OracleTypes.VARCHAR);
            cs.execute();
            result = cs.getString(1);
            cs.close();

        } catch (Exception e) {
            result = "2016-0";
        }
        return result;

    }

    public void setSessionValues(String orgId, String userId, String respId,
                                 String respAppl) {


        if (userId != null) {
            //String flag = getFlagValue(userId, respId);
            FacesContext fctx = FacesContext.getCurrentInstance();
            ExternalContext ectx = fctx.getExternalContext();
            HttpSession userSession = (HttpSession)ectx.getSession(false);
            //userSession.setAttribute("Flag", flag);
            userSession.setAttribute("userId", userId);
            userSession.setAttribute("orgId", orgId);
            userSession.setAttribute("respId", respId);
            userSession.setAttribute("respAppl", respAppl);
            userSession.setAttribute("unitName", getUnitName(orgId));
        }
    }


    public String getUnitName(String orgId) {

        ViewObject vo = getoperatingUnitsVo1();
        vo.setWhereClause("ORGANIZATION_ID = " + orgId);
        vo.executeQuery();
        String name = null;
        vo.first();

        try {
            name = vo.getCurrentRow().getAttribute("Name").toString();
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        return name;

    }


    /**
     * Container's getter for operatingUnitsVo1.
     * @return operatingUnitsVo1
     */
    public operatingUnitsVoImpl getoperatingUnitsVo1() {
        return (operatingUnitsVoImpl)findViewObject("operatingUnitsVo1");
    }


    public void setSizeWhereClause(String bpo, String stn, String color,
                                   String challan_no) {
        ViewObject lvo = this.getLineVO1();
        Row lCurrentRow = lvo.getCurrentRow();
        System.out.println("bpo " + bpo);
        System.out.println("stn " + stn);
        System.out.println("color " + color);
        System.out.println("challan_no " + challan_no);
        ViewObject hvo = this.getLineHeaderEOView1();
        Row hrow = hvo.getCurrentRow();
        String buyer = null;
        String style = null;
        String season = null;
        try {
            buyer = hrow.getAttribute("Attribute1").toString();
        } catch (Exception e) {
            ;
        }
        try {
            style = hrow.getAttribute("StyleName").toString();
        } catch (Exception e) {
            ;
        }
        try {
            season = hrow.getAttribute("Season").toString();
        } catch (Exception e) {
            ;
        }
        System.out.println(buyer);
        System.out.println(style);
        System.out.println(season);
        ViewObject Sizevo = this.getsimilarPopSizeVO1();
        Sizevo.setWhereClause("BPO1 = '" + bpo + "' AND STN1 = '" + stn +
                              "' AND COLOR1 = '" + color + "' AND STYLE = '" + style +
                              "' AND SEASON = '" + season +
                              "' AND ISSUANCE_CHALLAN_NO ='" + challan_no +  // commented on 1 april 18  // comment ommited on 10 may 18
                              "'");
        Sizevo.executeQuery();
        
        
        System.out.println("set where clause =========      "+"BPO1 = '" + bpo + "' AND STN1 = '" + stn +
                              "' AND COLOR1 = '" + color + "' AND STYLE = '" + style +
                              "' AND SEASON = '" + season +
                            //  "' AND ISSUANCE_CHALLAN_NO ='" + challan_no +  // commented on 1 april 18 
                              "'");
        
        System.out.println(Sizevo.getQuery());
        System.out.println("Row Count " + Sizevo.getRowCount());
    }

    /**
     * Container's getter for similarPopSizeVO1.
     * @return similarPopSizeVO1
     */
    public similarPopSizeVOImpl getsimilarPopSizeVO1() {
        return (similarPopSizeVOImpl)findViewObject("similarPopSizeVO1");
    }

    public void receiveSizeQtyValueChangeListener(String Quantity) {

        ViewObject lvo = this.getLineVO1();
        Row lCurrentRow = lvo.getCurrentRow();
        try {
            System.out.println(lCurrentRow.getAttribute("Attribute4").toString());
        } catch (Exception e) {

            ;
        }
    }

    public void pageLoadEvent() {
        ViewObject vo = getHeaderVO1();
        String Style = null;
        try {
            //////changed by arif StyleName changed  to StyleNameN
            Style = vo.getCurrentRow().getAttribute("StyleNameN").toString();
            System.out.println("Arif i am in page load try bolg:"+Style);

        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }

        if (Style != null) {
            FacesContext context = FacesContext.getCurrentInstance();
            FacesMessage message =
                new FacesMessage("Production Type is set Bulk by default. Kindly change value from LOV if Production Type is different..");
            context.addMessage(null, message);
            System.out.println("Arif i am in page load if bolg:"+Style);
            
        } else {

            System.out.println("Style is null....");
        }
    }

    /**
     * Container's getter for LineHeaderEOView1.
     * @return LineHeaderEOView1
     */
    public ViewObjectImpl getLineHeaderEOView1() {
        return (ViewObjectImpl)findViewObject("LineHeaderEOView1");
    }

    /**
     * Container's getter for MnjMfgIssueRecWashLHFkLink1.
     * @return MnjMfgIssueRecWashLHFkLink1
     */
    public ViewLinkImpl getMnjMfgIssueRecWashLHFkLink1() {
        return (ViewLinkImpl)findViewLink("MnjMfgIssueRecWashLHFkLink1");
    }

    /**
     * Container's getter for LineVO1.
     * @return LineVO1
     */
    public ViewObjectImpl getLineVO1() {
        return (ViewObjectImpl)findViewObject("LineVO1");
    }

    /**
     * Container's getter for IssueRecWashLFkLink1.
     * @return IssueRecWashLFkLink1
     */
    public ViewLinkImpl getIssueRecWashLFkLink1() {
        return (ViewLinkImpl)findViewLink("IssueRecWashLFkLink1");
    }

    /**
     * Container's getter for ReceiveDetailVO1.
     * @return ReceiveDetailVO1
     */
    public ViewObjectImpl getReceiveDetailVO1() {
        return (ViewObjectImpl)findViewObject("ReceiveDetailVO1");
    }

    /**
     * Container's getter for IssueRecWashDFkLink1.
     * @return IssueRecWashDFkLink1
     */
    public ViewLinkImpl getIssueRecWashDFkLink1() {
        return (ViewLinkImpl)findViewLink("IssueRecWashDFkLink1");
    }

    /**
     * Container's getter for IssueInseemSizeDVO1.
     * @return IssueInseemSizeDVO1
     */
    public ViewObjectImpl getIssueInseemSizeDVO1() {
        return (ViewObjectImpl)findViewObject("IssueInseemSizeDVO1");
    }

    /**
     * Container's getter for WashInseamSizeFkLink1.
     * @return WashInseamSizeFkLink1
     */
    public ViewLinkImpl getWashInseamSizeFkLink1() {
        return (ViewLinkImpl)findViewLink("WashInseamSizeFkLink1");
    }

    /**
     * Container's getter for ReciveSizeInseemVO1.
     * @return ReciveSizeInseemVO1
     */
    public ViewObjectImpl getReciveSizeInseemVO1() {
        return (ViewObjectImpl)findViewObject("ReciveSizeInseemVO1");
    }

    /**
     * Container's getter for RecInseamSizeDFkLink1.
     * @return RecInseamSizeDFkLink1
     */
    public ViewLinkImpl getRecInseamSizeDFkLink1() {
        return (ViewLinkImpl)findViewLink("RecInseamSizeDFkLink1");
    }

    /**
     * Container's getter for CustomerLov2_1.
     * @return CustomerLov2_1
     */
    public ViewObjectImpl getCustomerLov2_1() {
        return (ViewObjectImpl)findViewObject("CustomerLov2_1");
    }

    /**
     * Container's getter for FillBposPopUp1.
     * @return FillBposPopUp1
     */
    public ViewObjectImpl getFillBposPopUp1() {
        return (ViewObjectImpl)findViewObject("FillBposPopUp1");
    }
}
